
ElevatorProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d2  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000095  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000075  00000000  00000000  000002dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000199  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002f  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  7a:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_1>:
#include <avr/interrupt.h>

int floor = 1;

ISR(INT0_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
		
	}
	if (PINB6) {
		
	}
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <main>:
	}
}

int main(void)
{
	DDRB &= ~(1 << PB4); // go to floor 1
  96:	bc 98       	cbi	0x17, 4	; 23
	DDRB &= ~(1 << PB5); // go to floor 2
  98:	bd 98       	cbi	0x17, 5	; 23
	DDRB &= ~(1 << PB6); // go to floor 3
  9a:	be 98       	cbi	0x17, 6	; 23
	DDRB &= ~(1 << PB7); // go to floor 4
  9c:	bf 98       	cbi	0x17, 7	; 23
	DDRC &= ~(1 << PC0); // request floor 1
  9e:	a0 98       	cbi	0x14, 0	; 20
	DDRC &= ~(1 << PC1); // request floor 2
  a0:	a1 98       	cbi	0x14, 1	; 20
	DDRC &= ~(1 << PC2); // request floor 3
  a2:	a2 98       	cbi	0x14, 2	; 20
	DDRC &= ~(1 << PC3); // request floor 4
  a4:	a3 98       	cbi	0x14, 3	; 20
	DDRC &= ~(1 << PC4); // IR Sensor
  a6:	a4 98       	cbi	0x14, 4	; 20
	DDRC &= ~(1 << PC5); // alarm key
  a8:	a5 98       	cbi	0x14, 5	; 20
	
	// PORTD |= (1 << PD2); // Enable pull-up resistor on buttons above
	
	DDRD &= ~(1 << PD2); // Set PD2 as input
  aa:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2); // Enable pull-up resistor on PD2
  ac:	92 9a       	sbi	0x12, 2	; 18
	MCUCR |= (1 << ISC01); // Set for falling edge detection
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0); // Enable external interrupt INT0
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8b bf       	out	0x3b, r24	; 59
	
	sei(); // Enable global interrupts
  ba:	78 94       	sei
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x26>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
