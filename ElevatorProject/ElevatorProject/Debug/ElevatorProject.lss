
ElevatorProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e2  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068b  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  000011dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e3  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 90 00 	call	0x120	; 0x120 <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z31rotate_lift_motor_for_one_floor9direction>:
}



void lift_next_floor(floor_t current_floor, direction dir) {
	rotate_lift_motor_for_one_floor(dir);
  6c:	81 11       	cpse	r24, r1
  6e:	04 c0       	rjmp	.+8      	; 0x78 <_Z31rotate_lift_motor_for_one_floor9direction+0xc>
  70:	8b b3       	in	r24, 0x1b	; 27
  72:	8a 60       	ori	r24, 0x0A	; 10
  74:	8b bb       	out	0x1b, r24	; 27
  76:	05 c0       	rjmp	.+10     	; 0x82 <_Z31rotate_lift_motor_for_one_floor9direction+0x16>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	19 f4       	brne	.+6      	; 0x82 <_Z31rotate_lift_motor_for_one_floor9direction+0x16>
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	8c 60       	ori	r24, 0x0C	; 12
  80:	8b bb       	out	0x1b, r24	; 27
  82:	2f e3       	ldi	r18, 0x3F	; 63
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <_Z31rotate_lift_motor_for_one_floor9direction+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z31rotate_lift_motor_for_one_floor9direction+0x26>
  92:	00 00       	nop
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	1b ba       	out	0x1b, r1	; 27
  98:	08 95       	ret

0000009a <_Z18lift_motor_requestii>:
	}
}



void lift_motor_request(floor_t current_floor, floor_t dest_floor){
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
	
	int number_of_floors = current_floor - dest_floor;
  a4:	86 1b       	sub	r24, r22
  a6:	97 0b       	sbc	r25, r23
	direction dir = number_of_floors >= 0 ? ANTI_CLOCK_WISE : CLOCK_WISE; //specifing direction
  a8:	f9 2e       	mov	r15, r25
  aa:	f0 94       	com	r15
  ac:	ff 1c       	adc	r15, r15
  ae:	ff 24       	eor	r15, r15
  b0:	ff 1c       	adc	r15, r15
	number_of_floors = abs(number_of_floors); //specifing number of floors
  b2:	8c 01       	movw	r16, r24
  b4:	99 23       	and	r25, r25
  b6:	24 f4       	brge	.+8      	; 0xc0 <_Z18lift_motor_requestii+0x26>
  b8:	00 27       	eor	r16, r16
  ba:	11 27       	eor	r17, r17
  bc:	08 1b       	sub	r16, r24
  be:	19 0b       	sbc	r17, r25
	for (int i = 0; i < number_of_floors; i++) 
  c0:	10 16       	cp	r1, r16
  c2:	11 06       	cpc	r1, r17
  c4:	4c f4       	brge	.+18     	; 0xd8 <_Z18lift_motor_requestii+0x3e>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
}



void lift_next_floor(floor_t current_floor, direction dir) {
	rotate_lift_motor_for_one_floor(dir);
  ca:	8f 2d       	mov	r24, r15
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <_Z31rotate_lift_motor_for_one_floor9direction>
void lift_motor_request(floor_t current_floor, floor_t dest_floor){
	
	int number_of_floors = current_floor - dest_floor;
	direction dir = number_of_floors >= 0 ? ANTI_CLOCK_WISE : CLOCK_WISE; //specifing direction
	number_of_floors = abs(number_of_floors); //specifing number of floors
	for (int i = 0; i < number_of_floors; i++) 
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	0c 17       	cp	r16, r28
  d4:	1d 07       	cpc	r17, r29
  d6:	c9 f7       	brne	.-14     	; 0xca <_Z18lift_motor_requestii+0x30>
		lift_next_floor(current_floor, dir);
		
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	0f 91       	pop	r16
  e0:	ff 90       	pop	r15
  e2:	08 95       	ret

000000e4 <_Z13open_the_doorv>:


void open_the_door(){
	
	//clock_wise
	DOOR_MOTOR_PORT |= (1 << DOOR_MOTOR_IN1) | (1 << DOOR_MOTOR_EN); //enables the motor and specifies the direction of rotation
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	80 65       	ori	r24, 0x50	; 80
  e8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f e7       	ldi	r18, 0x7F	; 127
  ec:	8a e1       	ldi	r24, 0x1A	; 26
  ee:	96 e0       	ldi	r25, 0x06	; 6
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <_Z13open_the_doorv+0xc>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_Z13open_the_doorv+0x16>
  fa:	00 00       	nop
	_delay_ms(TIME_TO_OPEN_THE_DOOR);
	DOOR_MOTOR_PORT &= (0 << DOOR_MOTOR_EN); //disables the motor
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	1b ba       	out	0x1b, r1	; 27
 100:	08 95       	ret

00000102 <_Z14close_the_doorv>:


void close_the_door(){

	//anti_clock_wise
	DOOR_MOTOR_PORT |= (1 << DOOR_MOTOR_IN2) | (1 << DOOR_MOTOR_EN); //enables the motor and specifies the direction of rotation
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	80 66       	ori	r24, 0x60	; 96
 106:	8b bb       	out	0x1b, r24	; 27
 108:	2f e7       	ldi	r18, 0x7F	; 127
 10a:	8a e1       	ldi	r24, 0x1A	; 26
 10c:	96 e0       	ldi	r25, 0x06	; 6
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <_Z14close_the_doorv+0xc>
 116:	00 c0       	rjmp	.+0      	; 0x118 <_Z14close_the_doorv+0x16>
 118:	00 00       	nop
	_delay_ms(TIME_TO_CLOSE_THE_DOOR);
	DOOR_MOTOR_PORT &= (0 << DOOR_MOTOR_EN); //disables the motor
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	1b ba       	out	0x1b, r1	; 27
 11e:	08 95       	ret

00000120 <main>:
int main(void)
{

	//floor_t current_floor = 4;
	//floor_t dest_floor = 2;
	LIFT_MOTOR_DDR |= (1 << LIFT_MOTOR_IN1) | (1 << LIFT_MOTOR_IN2) | (1 << LIFT_MOTOR_EN);
 120:	8a b3       	in	r24, 0x1a	; 26
 122:	8e 60       	ori	r24, 0x0E	; 14
 124:	8a bb       	out	0x1a, r24	; 26
	DOOR_MOTOR_DDR |= (1 << DOOR_MOTOR_IN1) | (1 << DOOR_MOTOR_IN2) | (1 << DOOR_MOTOR_EN);
 126:	8a b3       	in	r24, 0x1a	; 26
 128:	80 67       	ori	r24, 0x70	; 112
 12a:	8a bb       	out	0x1a, r24	; 26

	lift_motor_request(1, 2);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z18lift_motor_requestii>

	open_the_door();
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z13open_the_doorv>
 13c:	2f e3       	ldi	r18, 0x3F	; 63
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	93 e0       	ldi	r25, 0x03	; 3
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x2c>
 14c:	00 00       	nop
	_delay_ms(WAIT_TIME_TO_CLOSE_THE_DOOR);
	close_the_door();
 14e:	0e 94 81 00 	call	0x102	; 0x102 <_Z14close_the_doorv>
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x32>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
