
ElevatorProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000384  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1a  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a9  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000629  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	7e 01       	movw	r14, r28
  56:	83 01       	movw	r16, r6
  58:	88 01       	movw	r16, r16
  5a:	8d 01       	movw	r16, r26
  5c:	7e 01       	movw	r14, r28
  5e:	83 01       	movw	r16, r6
  60:	88 01       	movw	r16, r16
  62:	8d 01       	movw	r16, r26

00000064 <__ctors_start>:
  64:	b1 01       	movw	r22, r2

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e4 e8       	ldi	r30, 0x84	; 132
  7a:	f3 e0       	ldi	r31, 0x03	; 3
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a2 36       	cpi	r26, 0x62	; 98
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a2 e6       	ldi	r26, 0x62	; 98
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	aa 36       	cpi	r26, 0x6A	; 106
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_global_ctors>:
  98:	10 e0       	ldi	r17, 0x00	; 0
  9a:	c3 e3       	ldi	r28, 0x33	; 51
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__do_global_ctors+0x10>
  a0:	21 97       	sbiw	r28, 0x01	; 1
  a2:	fe 01       	movw	r30, r28
  a4:	0e 94 ba 01 	call	0x374	; 0x374 <__tablejump2__>
  a8:	c2 33       	cpi	r28, 0x32	; 50
  aa:	d1 07       	cpc	r29, r17
  ac:	c9 f7       	brne	.-14     	; 0xa0 <__do_global_ctors+0x8>
  ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  b2:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z21set_request_for_floori>:
}



void lift_next_floor(floor_t current_floor, direction dir) {
	rotate_lift_motor_for_one_floor(dir);
  ba:	e2 e6       	ldi	r30, 0x62	; 98
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	8e 59       	subi	r24, 0x9E	; 158
  c0:	9f 4f       	sbci	r25, 0xFF	; 255
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	dc 01       	movw	r26, r24
  c6:	12 96       	adiw	r26, 0x02	; 2
  c8:	2c 93       	st	X, r18
  ca:	80 81       	ld	r24, Z
  cc:	91 81       	ldd	r25, Z+1	; 0x01
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	91 83       	std	Z+1, r25	; 0x01
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <_Z29get_nearest_available_requesti>:
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__data_end>
  e6:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__data_end+0x1>
  ea:	1e 14       	cp	r1, r14
  ec:	1f 04       	cpc	r1, r15
  ee:	ec f5       	brge	.+122    	; 0x16a <_Z29get_nearest_available_requesti+0x94>
  f0:	9c 01       	movw	r18, r24
  f2:	fc 01       	movw	r30, r24
  f4:	ee 59       	subi	r30, 0x9E	; 158
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	ec 01       	movw	r28, r24
  fa:	24 97       	sbiw	r28, 0x04	; 4
  fc:	df 01       	movw	r26, r30
  fe:	89 01       	movw	r16, r18
 100:	ac 01       	movw	r20, r24
 102:	33 23       	and	r19, r19
 104:	9c f0       	brlt	.+38     	; 0x12c <_Z29get_nearest_available_requesti+0x56>
 106:	12 96       	adiw	r26, 0x02	; 2
 108:	6c 91       	ld	r22, X
 10a:	12 97       	sbiw	r26, 0x02	; 2
 10c:	66 23       	and	r22, r22
 10e:	71 f0       	breq	.+28     	; 0x12c <_Z29get_nearest_available_requesti+0x56>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	e8 1a       	sub	r14, r24
 114:	f1 08       	sbc	r15, r1
 116:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__data_end+0x1>
 11a:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__data_end>
 11e:	f9 01       	movw	r30, r18
 120:	ee 59       	subi	r30, 0x9E	; 158
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	82 2f       	mov	r24, r18
 128:	91 2f       	mov	r25, r17
 12a:	21 c0       	rjmp	.+66     	; 0x16e <_Z29get_nearest_available_requesti+0x98>
 12c:	44 30       	cpi	r20, 0x04	; 4
 12e:	51 05       	cpc	r21, r1
 130:	8c f4       	brge	.+34     	; 0x154 <_Z29get_nearest_available_requesti+0x7e>
 132:	62 81       	ldd	r22, Z+2	; 0x02
 134:	66 23       	and	r22, r22
 136:	71 f0       	breq	.+28     	; 0x154 <_Z29get_nearest_available_requesti+0x7e>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	e8 1a       	sub	r14, r24
 13c:	f1 08       	sbc	r15, r1
 13e:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__data_end+0x1>
 142:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__data_end>
 146:	fa 01       	movw	r30, r20
 148:	ee 59       	subi	r30, 0x9E	; 158
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	12 82       	std	Z+2, r1	; 0x02
 14e:	84 2f       	mov	r24, r20
 150:	95 2f       	mov	r25, r21
 152:	0d c0       	rjmp	.+26     	; 0x16e <_Z29get_nearest_available_requesti+0x98>
 154:	21 50       	subi	r18, 0x01	; 1
 156:	31 09       	sbc	r19, r1
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	31 96       	adiw	r30, 0x01	; 1
 15c:	11 97       	sbiw	r26, 0x01	; 1
 15e:	2c 17       	cp	r18, r28
 160:	3d 07       	cpc	r19, r29
 162:	69 f6       	brne	.-102    	; 0xfe <_Z29get_nearest_available_requesti+0x28>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	02 c0       	rjmp	.+4      	; 0x16e <_Z29get_nearest_available_requesti+0x98>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	9f ef       	ldi	r25, 0xFF	; 255
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	08 95       	ret

0000017c <_Z8init_ddrv>:
 17c:	84 b3       	in	r24, 0x14	; 20
 17e:	8e 60       	ori	r24, 0x0E	; 14
 180:	84 bb       	out	0x14, r24	; 20
 182:	84 b3       	in	r24, 0x14	; 20
 184:	80 67       	ori	r24, 0x70	; 112
 186:	84 bb       	out	0x14, r24	; 20
 188:	8a b3       	in	r24, 0x1a	; 26
 18a:	84 7f       	andi	r24, 0xF4	; 244
 18c:	8a bb       	out	0x1a, r24	; 26
 18e:	8b b7       	in	r24, 0x3b	; 59
 190:	80 64       	ori	r24, 0x40	; 64
 192:	8b bf       	out	0x3b, r24	; 59
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	85 bf       	out	0x35, r24	; 53
 198:	2f e3       	ldi	r18, 0x3F	; 63
 19a:	8d e0       	ldi	r24, 0x0D	; 13
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <_Z8init_ddrv+0x22>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_Z8init_ddrv+0x2c>
 1a8:	00 00       	nop
 1aa:	78 94       	sei
 1ac:	08 95       	ret

000001ae <main>:
 1ae:	0e 94 be 00 	call	0x17c	; 0x17c <_Z8init_ddrv>
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
 1b6:	92 9a       	sbi	0x12, 2	; 18
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0xa>

000001ba <_Z31rotate_lift_motor_for_one_floor9direction>:
 1ba:	81 11       	cpse	r24, r1
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_Z31rotate_lift_motor_for_one_floor9direction+0xc>
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	8a 60       	ori	r24, 0x0A	; 10
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <_Z31rotate_lift_motor_for_one_floor9direction+0x16>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <_Z31rotate_lift_motor_for_one_floor9direction+0x16>
 1ca:	85 b3       	in	r24, 0x15	; 21
 1cc:	8c 60       	ori	r24, 0x0C	; 12
 1ce:	85 bb       	out	0x15, r24	; 21
 1d0:	2f e3       	ldi	r18, 0x3F	; 63
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_Z31rotate_lift_motor_for_one_floor9direction+0x1c>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z31rotate_lift_motor_for_one_floor9direction+0x26>
 1e0:	00 00       	nop
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	15 ba       	out	0x15, r1	; 21
 1e6:	08 95       	ret

000001e8 <_Z18lift_motor_requestii>:
	_delay_ms(WAIT_TIME_TO_CLOSE_THE_DOOR);
	close_the_door();
}


void lift_motor_request(floor_t current_floor, floor_t dest_floor){
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
	
	int number_of_floors = current_floor - dest_floor;
 1f2:	86 1b       	sub	r24, r22
 1f4:	97 0b       	sbc	r25, r23
	direction dir = number_of_floors >= 0 ? ANTI_CLOCK_WISE : CLOCK_WISE; //specifing direction
 1f6:	f9 2e       	mov	r15, r25
 1f8:	f0 94       	com	r15
 1fa:	ff 1c       	adc	r15, r15
 1fc:	ff 24       	eor	r15, r15
 1fe:	ff 1c       	adc	r15, r15
	number_of_floors = abs(number_of_floors); //specifing number of floors
 200:	8c 01       	movw	r16, r24
 202:	99 23       	and	r25, r25
 204:	24 f4       	brge	.+8      	; 0x20e <_Z18lift_motor_requestii+0x26>
 206:	00 27       	eor	r16, r16
 208:	11 27       	eor	r17, r17
 20a:	08 1b       	sub	r16, r24
 20c:	19 0b       	sbc	r17, r25
	for (int i = 0; i < number_of_floors; i++) 
 20e:	10 16       	cp	r1, r16
 210:	11 06       	cpc	r1, r17
 212:	4c f4       	brge	.+18     	; 0x226 <_Z18lift_motor_requestii+0x3e>
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
}



void lift_next_floor(floor_t current_floor, direction dir) {
	rotate_lift_motor_for_one_floor(dir);
 218:	8f 2d       	mov	r24, r15
 21a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z31rotate_lift_motor_for_one_floor9direction>
void lift_motor_request(floor_t current_floor, floor_t dest_floor){
	
	int number_of_floors = current_floor - dest_floor;
	direction dir = number_of_floors >= 0 ? ANTI_CLOCK_WISE : CLOCK_WISE; //specifing direction
	number_of_floors = abs(number_of_floors); //specifing number of floors
	for (int i = 0; i < number_of_floors; i++) 
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	0c 17       	cp	r16, r28
 222:	1d 07       	cpc	r17, r29
 224:	c9 f7       	brne	.-14     	; 0x218 <_Z18lift_motor_requestii+0x30>
		lift_next_floor(current_floor, dir);
		
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	08 95       	ret

00000232 <_Z13open_the_doorv>:


void open_the_door(){
	
	//clock_wise
	DOOR_MOTOR_PORT |= (1 << DOOR_MOTOR_IN1) | (1 << DOOR_MOTOR_EN); //enables the motor and specifies the direction of rotation
 232:	85 b3       	in	r24, 0x15	; 21
 234:	80 65       	ori	r24, 0x50	; 80
 236:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f e7       	ldi	r18, 0x7F	; 127
 23a:	8a e1       	ldi	r24, 0x1A	; 26
 23c:	96 e0       	ldi	r25, 0x06	; 6
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <_Z13open_the_doorv+0xc>
 246:	00 c0       	rjmp	.+0      	; 0x248 <_Z13open_the_doorv+0x16>
 248:	00 00       	nop
	_delay_ms(TIME_TO_OPEN_THE_DOOR);
	DOOR_MOTOR_PORT &= (0 << DOOR_MOTOR_EN); //disables the motor
 24a:	85 b3       	in	r24, 0x15	; 21
 24c:	15 ba       	out	0x15, r1	; 21
 24e:	08 95       	ret

00000250 <_Z14close_the_doorv>:


void close_the_door(){

	//anti_clock_wise
	DOOR_MOTOR_PORT |= (1 << DOOR_MOTOR_IN2) | (1 << DOOR_MOTOR_EN); //enables the motor and specifies the direction of rotation
 250:	85 b3       	in	r24, 0x15	; 21
 252:	80 66       	ori	r24, 0x60	; 96
 254:	85 bb       	out	0x15, r24	; 21
 256:	2f e7       	ldi	r18, 0x7F	; 127
 258:	8a e1       	ldi	r24, 0x1A	; 26
 25a:	96 e0       	ldi	r25, 0x06	; 6
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <_Z14close_the_doorv+0xc>
 264:	00 c0       	rjmp	.+0      	; 0x266 <_Z14close_the_doorv+0x16>
 266:	00 00       	nop
	_delay_ms(TIME_TO_CLOSE_THE_DOOR);
	DOOR_MOTOR_PORT &= (0 << DOOR_MOTOR_EN); //disables the motor
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	15 ba       	out	0x15, r1	; 21
 26c:	08 95       	ret

0000026e <_Z16lift_go_to_floori>:

}



void lift_go_to_floor(floor_t dest_floor){
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24

	state = MOVING;
 274:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	lift_motor_request(current_floor, dest_floor);
 278:	bc 01       	movw	r22, r24
 27a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_floor>
 27e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_floor+0x1>
 282:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z18lift_motor_requestii>
	current_floor = dest_floor; //current_floor is global variable here
 286:	d0 93 69 00 	sts	0x0069, r29	; 0x800069 <current_floor+0x1>
 28a:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <current_floor>
	state = STATIONARY;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	open_the_door();
 294:	0e 94 19 01 	call	0x232	; 0x232 <_Z13open_the_doorv>
 298:	2f e3       	ldi	r18, 0x3F	; 63
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	93 e0       	ldi	r25, 0x03	; 3
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <_Z16lift_go_to_floori+0x30>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <_Z16lift_go_to_floori+0x3a>
 2a8:	00 00       	nop
	_delay_ms(WAIT_TIME_TO_CLOSE_THE_DOOR);
	close_the_door();
 2aa:	0e 94 28 01 	call	0x250	; 0x250 <_Z14close_the_doorv>
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <__vector_1>:

void init_ddr();



ISR(INT0_vect) {
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	1f 92       	push	r1
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62

	volatile uint8_t request_code = PINA & KEY_PAD_BIT_MSK; 
 2e0:	89 b3       	in	r24, 0x19	; 25
 2e2:	8f 70       	andi	r24, 0x0F	; 15
 2e4:	89 83       	std	Y+1, r24	; 0x01
	//PORTB = request_code;
	switch (request_code) {
 2e6:	e9 81       	ldd	r30, Y+1	; 0x01
 2e8:	8e 2f       	mov	r24, r30
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	88 30       	cpi	r24, 0x08	; 8
 2ee:	91 05       	cpc	r25, r1
 2f0:	c0 f4       	brcc	.+48     	; 0x322 <__vector_1+0x6e>
 2f2:	fc 01       	movw	r30, r24
 2f4:	e6 5d       	subi	r30, 0xD6	; 214
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	0c 94 ba 01 	jmp	0x374	; 0x374 <__tablejump2__>

		case KEY_PAD_0_REQUEST_CODE:
		case FLOOR_0_REQUEST_CODE:
			set_request_for_floor(0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 5d 00 	call	0xba	; 0xba <_Z21set_request_for_floori>
		break;
 304:	0e c0       	rjmp	.+28     	; 0x322 <__vector_1+0x6e>
		case KEY_PAD_1_REQUEST_CODE:
		case FLOOR_1_REQUEST_CODE:
			set_request_for_floor(1);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 5d 00 	call	0xba	; 0xba <_Z21set_request_for_floori>
		break;
 30e:	09 c0       	rjmp	.+18     	; 0x322 <__vector_1+0x6e>
		case KEY_PAD_2_REQUEST_CODE:
		case FLOOR_2_REQUEST_CODE:
			set_request_for_floor(2);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 5d 00 	call	0xba	; 0xba <_Z21set_request_for_floori>
		break;
 318:	04 c0       	rjmp	.+8      	; 0x322 <__vector_1+0x6e>
		case KEY_PAD_3_REQUEST_CODE:
		case FLOOR_3_REQUEST_CODE:
			set_request_for_floor(3);
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 5d 00 	call	0xba	; 0xba <_Z21set_request_for_floori>
		//TODO: alarm ?
		break;

	}

	if (state == STATIONARY) {
 322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	41 f4       	brne	.+16     	; 0x33a <__vector_1+0x86>
		floor_t nearest_floor = get_nearest_available_request(current_floor);
 32a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_floor>
 32e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_floor+0x1>
 332:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z29get_nearest_available_requesti>
		lift_go_to_floor(nearest_floor);
 336:	0e 94 37 01 	call	0x26e	; 0x26e <_Z16lift_go_to_floori>
	}

}
 33a:	0f 90       	pop	r0
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <_GLOBAL__sub_I_state>:
floor_t current_floor = 0;




struct request_holder{
 362:	e2 e6       	ldi	r30, 0x62	; 98
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	11 82       	std	Z+1, r1	; 0x01
 368:	10 82       	st	Z, r1
 36a:	12 82       	std	Z+2, r1	; 0x02
 36c:	13 82       	std	Z+3, r1	; 0x03
 36e:	14 82       	std	Z+4, r1	; 0x04
 370:	15 82       	std	Z+5, r1	; 0x05
 372:	08 95       	ret

00000374 <__tablejump2__>:
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	05 90       	lpm	r0, Z+
 37a:	f4 91       	lpm	r31, Z
 37c:	e0 2d       	mov	r30, r0
 37e:	09 94       	ijmp

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
